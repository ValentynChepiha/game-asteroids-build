{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/core/collisions.js",
    "src/core/constants.js",
    "src/core/coordinates.js",
    "src/core/game.js",
    "src/core/levels.js",
    "src/core/math.js",
    "src/core/objects.js",
    "src/core/values.js",
    "src/index.js",
    "src/objects/asteroid.js",
    "src/objects/bullet.js",
    "src/objects/cloud.js",
    "src/objects/spaceShip.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "export const buildCollisions = function() {\r\n  return {\r\n    pointBetweenTwoPoints: function(asteroid, line) {\r\n      return (\r\n        this.betweenTwoValues(asteroid.x, line[0].x, line[1].x) ||\r\n        this.betweenTwoValues(asteroid.y, line[0].y, line[1].y)\r\n      );\r\n    },\r\n\r\n    betweenTwoValues: function(a, b, c) {\r\n      [b, c] = [Math.min(b, c), Math.max(b, c)];\r\n      return a >= b && a <= c;\r\n    },\r\n\r\n    lineAcrossAsteroid: function({x,y}, radius, line) {\r\n      let dx1 = line[0].x - x;\r\n      let dy1 = line[0].y - y;\r\n\r\n      let dx2 = line[1].x - x;\r\n      let dy2 = line[1].y - y;\r\n\r\n      let dx = dx1 - dx2;\r\n      let dy = dy1 - dy2;\r\n\r\n      let a = dx ** 2 + dy ** 2;\r\n      let b = 2 * (dx1 * dx + dy1 * dy);\r\n      let c = dx1 ** 2 + dy1 ** 2 - (radius * 0.9) ** 2;\r\n\r\n      let d = b ** 2 - 4 * a * c;\r\n\r\n      if (d < 0) {\r\n        return false;\r\n      }\r\n\r\n      let x1 = (-b + d ** 0.5) / (4 * a);\r\n      let x2 = (-b - d ** 0.5) / (4 * a);\r\n\r\n      return ((x1 >= 0 && x1 <= 1) || (x1 >= 0 && x2 <= 1)) && d > 0;\r\n    }\r\n  };\r\n};\r\n",
    "export  const buildConstants = function (){\r\n  return {\r\n    COLOR_SHIP : \"#6e7bd0\",\r\n    COLOR_ASTEROID : \"#959595\",\r\n    COLOR_FIRE : \"#d05018\",\r\n    COLOR_BULLET : \"#fff805\",\r\n    COLOR_TEXT : \"#06ff4c\",\r\n    COLOR_BOOM : \"#ff921a\",\r\n\r\n    COUNT_LIVE : 3,\r\n\r\n    LENGTH_PATH_BULLET : 400,\r\n    MAX_SPEED_ROTATION_ASTEROID: 10,\r\n\r\n    SPEED_BULLET : 5,\r\n    SPEED_SPACE_SHIP : 3,\r\n    SPEED_ROTATION_SHIP : 3,\r\n\r\n    LIST_RADIUS : [10, 20, 30],\r\n    START_ANGLE : 180,\r\n\r\n    SHOW_DIED_ASTEROID : 100,\r\n    SHOW_BORN_SPACE_SHIP : 1000,\r\n  }\r\n};\r\n",
    "export const buildCoordinates = function() {\r\n  return {\r\n    rotate: function(x0, y0, x, y, angle) {\r\n      return {\r\n        x:\r\n          x0 +\r\n          (x - x0) * Math.cos(angle) -\r\n          (y - y0) * Math.sin(angle),\r\n        y:\r\n          y0 +\r\n          (x - x0) * Math.sin(angle) +\r\n          (y - y0) * Math.cos(angle)\r\n      };\r\n    },\r\n\r\n    pointInc: function(point, dx, dy) {\r\n      return { x: point.x + dx, y: point.y + dy };\r\n    },\r\n\r\n    pointDec: function(point, dx, dy) {\r\n      return { x: point.x - dx, y: point.y - dy };\r\n    },\r\n\r\n    createObject: function(tmpl, center, radius = 1) {\r\n      return tmpl.map(point => {\r\n        return {\r\n          x: center.x + point.x * radius,\r\n          y: center.y + point.y * radius\r\n        };\r\n      });\r\n    }\r\n\r\n  };\r\n};\r\n",
    "export const buildGame = function() {\r\n\r\n  const container = document.getElementById(\"content\");\r\n  const canvas = document.getElementById(\"canvas\");\r\n  const footer = document.getElementById(\"footer\");\r\n  const playGame = document.getElementById(\"play\");\r\n\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  let asteroids = [];\r\n  let bullets = [];\r\n  let showSpaceShip = true;\r\n  let animation = \"\";\r\n\r\n  let spaceShip = {};\r\n  let cloud = {};\r\n\r\n  let prevUpdateTime = 0;\r\n  let height = 0;\r\n  let width = 0;\r\n\r\n  let level = 0;\r\n  let score = 0;\r\n  let live = 3;\r\n\r\n  let Game = {};\r\n\r\n  return {\r\n    init: function(thisGame) {\r\n      window.addEventListener(\"resize\", x => this.onResize());\r\n      playGame.addEventListener(\"click\", e => this.restart());\r\n\r\n      Game = thisGame;\r\n      this.start();\r\n    },\r\n\r\n    start: function(){\r\n\r\n\r\n      this.play();\r\n    },\r\n\r\n    play: function() {\r\n      footer.style.display = \"none\";\r\n\r\n      window.addEventListener(\"keydown\", e => this.onKeydown(e));\r\n      window.addEventListener(\"keyup\", e => this.onKeyup(e));\r\n      this.onResize();\r\n\r\n      ctx.clearRect(0, 0, width, height);\r\n\r\n      cloud = Game.base.buildCloud(Game).init();\r\n      asteroids.push(...cloud.asteroids());\r\n\r\n      spaceShip = Game.base.buildSpaceShip(Game).init();\r\n      requestAnimationFrame(time => this.update(time));\r\n    },\r\n\r\n    restart: function() {\r\n      window.location.reload();\r\n    },\r\n\r\n    draw: function() {\r\n      if (!live) {\r\n        this.gameOver();\r\n        return;\r\n      }\r\n\r\n      if (score > this.levels[level].score) {\r\n        level += 1;\r\n      }\r\n\r\n      let newAsteroids = [];\r\n\r\n      if (!asteroids.length) {\r\n        cloud.refresh(Game);\r\n        asteroids.push(...cloud.asteroids());\r\n      }\r\n\r\n      if (spaceShip.timeBorn()) {\r\n        showSpaceShip = !showSpaceShip;\r\n        if (\r\n          prevUpdateTime - spaceShip.timeBorn() >=\r\n          this.constants.SHOW_BORN_SPACE_SHIP\r\n        ) {\r\n          spaceShip.born(0);\r\n          showSpaceShip = true;\r\n        }\r\n      }\r\n\r\n      if (spaceShip.alive()) {\r\n        live -= 1;\r\n        spaceShip = Game.base.buildSpaceShip(this).init();\r\n        spaceShip.born(prevUpdateTime);\r\n      }\r\n\r\n      for (let i = 0; i < asteroids.length; i += 1) {\r\n        asteroids[i].move(width, height);\r\n        if (asteroids[i].isDied() && !asteroids[i].timeDied()) {\r\n          asteroids[i].setTimeDied(prevUpdateTime);\r\n          newAsteroids.push(...this.createFragmentsAsteroid(asteroids[i]));\r\n        }\r\n        this.drawPolygon(asteroids[i].body(), asteroids[i].currentColor());\r\n      }\r\n\r\n      if (newAsteroids.length) {\r\n        asteroids.push(...newAsteroids);\r\n      }\r\n\r\n      asteroids = asteroids.filter(\r\n        asteroid =>\r\n          !asteroid.isDied() ||\r\n          (asteroid.isDied() &&\r\n            prevUpdateTime - asteroid.timeDied() <\r\n              this.constants.SHOW_DIED_ASTEROID)\r\n      );\r\n\r\n      spaceShip.move(width, height);\r\n\r\n      if (showSpaceShip) {\r\n        this.drawSpaceShip();\r\n      }\r\n\r\n      bullets = bullets.filter(bullet => bullet.alive());\r\n\r\n      for (let i = 0; i < bullets.length; i += 1) {\r\n        bullets[i].move(width, height);\r\n        this.drawPolygon(bullets[i].body(), bullets[i].color());\r\n      }\r\n\r\n      this.drawText(`Score: ${score}`, 8, 30);\r\n      this.drawText(`Lives: ${live}`, width - 110, 30);\r\n\r\n      this.collisions();\r\n    },\r\n\r\n    drawSpaceShip: function() {\r\n      this.drawPolygon(spaceShip.body(), spaceShip.colorBody());\r\n      if (spaceShip.moving()) {\r\n        this.drawPolygon(spaceShip.fire(), spaceShip.colorFire());\r\n      }\r\n    },\r\n\r\n    createFragmentsAsteroid: function(asteroid) {\r\n      let currentRadius = asteroid.currentRadius();\r\n      let newIndex = this.constants.LIST_RADIUS.indexOf(currentRadius) - 1;\r\n      score += currentRadius;\r\n      if (newIndex > -1) {\r\n        let newRadius = this.constants.LIST_RADIUS[newIndex];\r\n        return [\r\n          cloud.newAsteroid(asteroid.center(), newRadius),\r\n          cloud.newAsteroid(asteroid.center(), newRadius)\r\n        ];\r\n      }\r\n      return [];\r\n    },\r\n\r\n    collisions: function() {\r\n      for (let i = 0; i < asteroids.length; i += 1) {\r\n        if (asteroids[i].isDied()) {\r\n          continue;\r\n        }\r\n        for (let j = 0; j < bullets.length; j += 1) {\r\n          let flag = this.collisionAsteroidBullet(asteroids[i], bullets[j]);\r\n          if (flag) {\r\n            asteroids[i].hitInc(1);\r\n            bullets[j].died(flag);\r\n          }\r\n        }\r\n\r\n        if (\r\n          !spaceShip.timeBorn() ||\r\n          prevUpdateTime - spaceShip.timeBorn() >=\r\n            this.constants.SHOW_BORN_SPACE_SHIP\r\n        ) {\r\n          this.collisionAsteroidShip(asteroids[i], spaceShip);\r\n        }\r\n      }\r\n    },\r\n\r\n    collisionAsteroidBullet: function(asteroid, bullet) {\r\n      let ab = Game.base.math.length(\r\n        asteroid.center().x,\r\n        asteroid.center().y,\r\n        bullet.center().x,\r\n        bullet.center().y\r\n      );\r\n      return ab < asteroid.radius() + bullet.radius();\r\n    },\r\n\r\n    collisionAsteroidShip: function(asteroid, spaceShip) {\r\n      let lines = spaceShip.lines();\r\n      for (let i = 0; i < lines.length; i += 1) {\r\n        if (\r\n          Game.base.collisions.pointBetweenTwoPoints(asteroid.center(), lines[i]) &&\r\n          Game.base.collisions.lineAcrossAsteroid(\r\n            asteroid.center(),\r\n            asteroid.radius(),\r\n            lines[i]\r\n          )\r\n        ) {\r\n          spaceShip.died(true);\r\n        }\r\n      }\r\n    },\r\n\r\n    drawPolygon: function(polygon, color) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = color;\r\n      ctx.moveTo(polygon[polygon.length - 1].x, polygon[polygon.length - 1].y);\r\n      for (let i = 0; i < polygon.length; i += 1) {\r\n        ctx.lineTo(polygon[i].x, polygon[i].y);\r\n      }\r\n      ctx.fill();\r\n      ctx.closePath();\r\n    },\r\n\r\n    drawText: function(text, x, y) {\r\n      ctx.textAlign = \"left\";\r\n      ctx.font = \"24px Arial\";\r\n      ctx.fillStyle = this.constants.COLOR_TEXT;\r\n      ctx.fillText(text, x, y);\r\n    },\r\n\r\n    onResize: function() {\r\n      width = container.clientWidth;\r\n      height = container.clientHeight;\r\n\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n    },\r\n\r\n    onKeydown: function(e) {\r\n      if (e.code === \"Space\") {\r\n        bullets.push(spaceShip.shot());\r\n      }\r\n      if (e.code === \"ArrowLeft\") {\r\n        spaceShip.isTurnLeft(true);\r\n      }\r\n      if (e.code === \"ArrowRight\") {\r\n        spaceShip.isTurnRight(true);\r\n      }\r\n      if (e.code === \"ArrowUp\") {\r\n        spaceShip.isMoving(true);\r\n      }\r\n    },\r\n\r\n    onKeyup: function(e) {\r\n      if (e.code === \"ArrowLeft\") {\r\n        spaceShip.isTurnLeft(false);\r\n      }\r\n      if (e.code === \"ArrowRight\") {\r\n        spaceShip.isTurnRight(false);\r\n      }\r\n      if (e.code === \"ArrowUp\") {\r\n        spaceShip.isMoving(false);\r\n      }\r\n    },\r\n\r\n    update: function(time) {\r\n      const dt = time - prevUpdateTime;\r\n      prevUpdateTime = time;\r\n      ctx.clearRect(0, 0, width, height);\r\n\r\n      this.draw();\r\n      animation = requestAnimationFrame(time => this.update(time));\r\n    },\r\n\r\n    gameOver: function() {\r\n      window.cancelAnimationFrame(animation);\r\n      window.removeEventListener(\"keydown\", e => this.onKeydown(e));\r\n      window.removeEventListener(\"keyup\", e => this.onKeyup(e));\r\n\r\n      footer.style.display = \"block\";\r\n\r\n      ctx.clearRect(0, 0, width, height);\r\n      ctx.font = \"48px Arial\";\r\n      ctx.fillStyle = this.constants.COLOR_TEXT;\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(`You score: ${score}`, width / 2, height / 2 - 80);\r\n      ctx.font = \"72px Arial\";\r\n      ctx.fillStyle = this.constants.COLOR_TEXT;\r\n      ctx.fillText(`Game over`, width / 2, height / 2);\r\n    },\r\n\r\n    height: function() {\r\n      return height;\r\n    },\r\n\r\n    width: function() {\r\n      return width;\r\n    },\r\n\r\n    level: function() {\r\n      return level;\r\n    }\r\n  };\r\n\r\n};\r\n",
    "export const buildLevels = function() {\r\n  return [\r\n    {\r\n      count: 7,\r\n      maxSpeed: 2,\r\n      score: 500\r\n    },\r\n    {\r\n      count: 8,\r\n      maxSpeed: 2,\r\n      score: 1000\r\n    },\r\n    {\r\n      count: 8,\r\n      maxSpeed: 3,\r\n      score: 2000\r\n    },\r\n    {\r\n      count: 10,\r\n      maxSpeed: 3,\r\n      score: 3000\r\n    },\r\n    {\r\n      count: 13,\r\n      maxSpeed: 4,\r\n      score: Infinity\r\n    }\r\n  ];\r\n};\r\n",
    "export const buildMath = function() {\r\n  return {\r\n    coefficientK: function(x1, y1, x2, y2) {\r\n      return (y2 - y1) / (x2 - x1);\r\n    },\r\n\r\n    calculateDX: function(speed, coefficientK) {\r\n      return (speed ** 2 / (1 + coefficientK ** 2)) ** 0.5;\r\n    },\r\n\r\n    calculateDY: function(dx, coefficientK) {\r\n      return dx * coefficientK;\r\n    },\r\n\r\n    coefficientB: function(x1, y1, x2, y2) {\r\n      return y1 - x1 * this.coefficientK(x1, y1, x2, y2);\r\n    },\r\n\r\n    length: function(x1, y1, x2, y2) {\r\n      return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5;\r\n    },\r\n\r\n    toRadian: function(angle) {\r\n      return (angle * Math.PI) / 180;\r\n    }\r\n  };\r\n};\r\n",
    "export const buildObjects = function() {\r\n  return {\r\n    TMPL_ASTEROID: [\r\n      { x: 6, y: -7 },\r\n      { x: 7, y: -6 },\r\n      { x: 8, y: -5 },\r\n      { x: 9, y: -4 },\r\n      { x: 8, y: 6 },\r\n      { x: -6, y: 8 },\r\n      { x: -5, y: 6 },\r\n      { x: -7, y: 7 },\r\n      { x: -8, y: 1 },\r\n      { x: -8, y: -2 },\r\n      { x: -8, y: -6 },\r\n      { x: -4, y: -9 }\r\n    ],\r\n\r\n    TMPL_BOOM: [\r\n      { x: 7, y: -1 },\r\n      { x: 2, y: 1 },\r\n      { x: 5, y: 5 },\r\n      { x: 1, y: 2 },\r\n      { x: 0, y: 8 },\r\n      { x: -1, y: 2 },\r\n      { x: -4, y: 4 },\r\n      { x: -2, y: 1 },\r\n      { x: -8, y: 0 },\r\n      { x: -2, y: -1 },\r\n      { x: -5, y: -4 },\r\n      { x: -1, y: -3 },\r\n      { x: 1, y: -9 },\r\n      { x: 1, y: -2 },\r\n      { x: 5, y: -5 },\r\n      { x: 2, y: -1 }\r\n    ],\r\n\r\n    TMPL_SPACE_SHIP: [\r\n      { x: 0, y: -20 },\r\n      { x: 15, y: 17 },\r\n      { x: 7, y: 10 },\r\n      { x: -7, y: 10 },\r\n      { x: -15, y: 17 }\r\n    ],\r\n\r\n    TMPL_FIRE: [\r\n      { x: 5, y: 10 },\r\n      { x: 0, y: 20 },\r\n      { x: -5, y: 10 }\r\n    ],\r\n\r\n    TMPL_BULLET: [\r\n      { x: 2, y: -2 },\r\n      { x: -2, y: -2 },\r\n      { x: -2, y: 2 },\r\n      { x: 2, y: 2 }\r\n    ]\r\n  };\r\n};\r\n",
    "export const buildValues = function() {\r\n  return {\r\n    changeValue: function(flag, value, delta) {\r\n      return (value += flag ? -1 * delta : delta);\r\n    },\r\n\r\n    mutateObject: function(object, ind, fn) {\r\n      return object.map(el => {\r\n        return { x: el.x, y: el.y, [ind]: fn(el[ind]) };\r\n      });\r\n    }\r\n  };\r\n};\r\n",
    "import { buildConstants } from \"./core/constants\";\r\nimport { buildLevels } from \"./core/levels\";\r\nimport { buildObjects } from \"./core/objects\";\r\n\r\nimport { buildGame } from \"./core/game\";\r\n\r\nimport { buildMath } from \"./core/math\";\r\nimport { buildCoordinates } from \"./core/coordinates\";\r\nimport { buildValues } from \"./core/values\";\r\nimport { buildCollisions } from \"./core/collisions\";\r\n\r\nimport { buildCloud } from \"./objects/cloud\";\r\nimport { buildSpaceShip } from \"./objects/spaceShip\";\r\n\r\n(function() {\r\n  const App = App || {};\r\n\r\n  App.builder = function(namespace) {\r\n    let path = namespace.split(\".\");\r\n\r\n    if (path[0] === \"App\") {\r\n      path = path.slice(1);\r\n    }\r\n\r\n    return path.reduce((parent, element) => {\r\n      if (typeof parent[element] === \"undefined\") {\r\n        parent[element] = {};\r\n      }\r\n      return parent[element];\r\n    }, App);\r\n  };\r\n\r\n  App.builder(\"Game\");\r\n  App.Game = buildGame();\r\n\r\n  App.builder(\"Game.base.math\");\r\n  App.Game.base.math = buildMath();\r\n  App.builder(\"Game.base.coordinates\");\r\n  App.Game.base.coordinates = buildCoordinates();\r\n  App.builder(\"Game.base.values\");\r\n  App.Game.base.values = buildValues();\r\n  App.builder(\"Game.base.collisions\");\r\n  App.Game.base.collisions = buildCollisions();\r\n\r\n  App.Game.base.buildCloud = buildCloud;\r\n  App.Game.base.buildSpaceShip = buildSpaceShip;\r\n\r\n  App.builder(\"Game.constants\");\r\n  App.Game.constants = buildConstants();\r\n  App.builder(\"Game.levels\");\r\n  App.Game.levels = buildLevels();\r\n  App.builder(\"Game.templates\");\r\n  App.Game.templates = buildObjects();\r\n\r\n  App.Game.init(App.Game);\r\n})();\r\n",
    "export const buildAsteroid = function(x, y, radius, angle, maxSpeed, Game) {\r\n  let asteroid = {};\r\n\r\n  let health = String(radius)[0] * 1;\r\n  let hit = 0;\r\n  let speed = {};\r\n  let isDied = false;\r\n  let time = 0;\r\n  let color = Game.constants.COLOR_ASTEROID;\r\n  let bodyCoordinates = {};\r\n\r\n  asteroid.init = function() {\r\n    let dir = Math.random() > 0.5 ? -1 : 1;\r\n    let value = Math.ceil(Math.random() * maxSpeed);\r\n    speed.moveX = dir * value;\r\n\r\n    dir = Math.random() > 0.5 ? -1 : 1;\r\n    value = Math.ceil(Math.random() * maxSpeed);\r\n    speed.moveY = dir * value;\r\n\r\n    value = Math.ceil(\r\n      Math.random() * Game.constants.MAX_SPEED_ROTATION_ASTEROID\r\n    );\r\n    speed.rotation = dir * value;\r\n    return this;\r\n  };\r\n\r\n  asteroid.hitInc = function(value) {\r\n    hit += value;\r\n  };\r\n\r\n  asteroid.body = function() {\r\n    return bodyCoordinates;\r\n  };\r\n\r\n  asteroid.isDied = function() {\r\n    return isDied;\r\n  };\r\n\r\n  asteroid.timeDied = function() {\r\n    return time;\r\n  };\r\n\r\n  asteroid.radius = function(){\r\n    return radius;\r\n  };\r\n\r\n  asteroid.setTimeDied = function(currentTime) {\r\n    time = currentTime;\r\n  };\r\n\r\n  asteroid.center = function() {\r\n    return { x, y };\r\n  };\r\n\r\n  asteroid.currentRadius = function() {\r\n    return radius;\r\n  };\r\n\r\n  asteroid.currentColor = function() {\r\n    return color;\r\n  };\r\n\r\n  asteroid.moveX = function(maxX) {\r\n    if (!speed.moveX) {\r\n      return this;\r\n    }\r\n\r\n    x += speed.moveX;\r\n    if (x > maxX) {\r\n      x = 0;\r\n    }\r\n\r\n    if (x < 0) {\r\n      x = maxX;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  asteroid.moveY = function(maxY) {\r\n    if (!speed.moveY) {\r\n      return this;\r\n    }\r\n\r\n    y += speed.moveY;\r\n    if (y > maxY) {\r\n      y = 0;\r\n    }\r\n\r\n    if (y < 0) {\r\n      y = maxY;\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  asteroid.calculateBody = function() {\r\n    angle += speed.rotation;\r\n    angle = angle % 360;\r\n\r\n    bodyCoordinates = Game.base.coordinates.createObject(\r\n      Game.templates.TMPL_ASTEROID,\r\n      asteroid.center(),\r\n      health\r\n    );\r\n    // todo angle - перевести в радіани\r\n    bodyCoordinates = bodyCoordinates.map(el =>\r\n      Game.base.coordinates.rotate(x, y, el.x, el.y, Game.base.math.toRadian(angle) )\r\n    );\r\n    return this;\r\n  };\r\n\r\n  asteroid.calculateBoom = function() {\r\n    bodyCoordinates = Game.base.coordinates.createObject(\r\n      Game.templates.TMPL_BOOM,\r\n      asteroid.center(),\r\n      health\r\n    );\r\n  };\r\n\r\n  asteroid.move = function(maxX, maxY) {\r\n    if (hit >= health) {\r\n      isDied = true;\r\n      color = Game.constants.COLOR_BOOM;\r\n      asteroid.calculateBoom();\r\n      return this;\r\n    }\r\n\r\n    return asteroid\r\n      .moveX(maxX)\r\n      .moveY(maxY)\r\n      .calculateBody();\r\n  };\r\n\r\n  return asteroid;\r\n};\r\n",
    "export const buildBullet = function(x, y, x0, y0, Game) {\r\n  let bullet = {};\r\n\r\n  let center = { x, y };\r\n  let ship = { x0, y0 };\r\n  let speed = Game.constants.SPEED_BULLET;\r\n\r\n  let dx = 0;\r\n  let dy = 0;\r\n  let k = 0;\r\n\r\n  let isDied = false;\r\n  let maxLengthPath = Game.constants.LENGTH_PATH_BULLET;\r\n  let lengthPath = 0;\r\n  let color = Game.constants.COLOR_BULLET;\r\n\r\n  let bulletCoordinates = [];\r\n\r\n  bullet.init = function() {\r\n    bulletCoordinates = bullet.calculateBody();\r\n    k = Game.base.math.coefficientK(ship.x0, ship.y0, center.x, center.y);\r\n    bullet.calculateDelta(k);\r\n    return this;\r\n  };\r\n\r\n  bullet.calculateDelta = function(coefficientK) {\r\n    let dirCondition;\r\n\r\n    if (Math.abs(coefficientK) === Infinity) {\r\n      dirCondition = ship.y0 > center.y;\r\n      dx = 0;\r\n      dy = speed * (dirCondition ? -1 : 1);\r\n      return this;\r\n    }\r\n\r\n    dirCondition = ship.x0 > center.x;\r\n\r\n    if (!coefficientK) {\r\n      dx = speed * (dirCondition ? -1 : 1);\r\n      dy = 0;\r\n      return this;\r\n    }\r\n\r\n    dx = (dirCondition ? -1 : 1) * Game.base.math.calculateDX(speed, coefficientK);\r\n    dy = Game.base.math.calculateDY(dx, coefficientK);\r\n  };\r\n\r\n  bullet.calculateBody = function() {\r\n    return Game.base.coordinates.createObject(Game.templates.TMPL_BULLET, bullet.center());\r\n  };\r\n\r\n  bullet.center = function() {\r\n    return center;\r\n  };\r\n\r\n  bullet.beforeZero = function(ind, max) {\r\n    if (center[ind] < 0) {\r\n      bulletCoordinates = Game.base.values.mutateObject(\r\n        bulletCoordinates,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      center[ind] = max;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  bullet.afterMax = function(ind, max) {\r\n    if (center[ind] > max) {\r\n      bulletCoordinates = Game.base.values.mutateObject(\r\n        bulletCoordinates,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      center[ind] = 0;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  bullet.move = function(maxX, maxY) {\r\n    if (lengthPath > maxLengthPath) {\r\n      isDied = true;\r\n      return this;\r\n    }\r\n\r\n    bullet\r\n      .beforeZero(\"x\", maxX)\r\n      .afterMax(\"x\", maxX)\r\n      .beforeZero(\"y\", maxY)\r\n      .afterMax(\"y\", maxY);\r\n\r\n    lengthPath += speed;\r\n    bulletCoordinates = bulletCoordinates.map(el =>\r\n      Game.base.coordinates.pointInc(el, dx, dy)\r\n    );\r\n    center.x += dx;\r\n    center.y += dy;\r\n  };\r\n\r\n  bullet.died = function(flag) {\r\n    isDied = flag;\r\n  };\r\n\r\n  bullet.body = function() {\r\n    return bulletCoordinates;\r\n  };\r\n\r\n  bullet.alive = function() {\r\n    return !isDied;\r\n  };\r\n\r\n  bullet.color = function(){\r\n    return color;\r\n  };\r\n\r\n  bullet.radius = function() {\r\n    return Game.base.math.length(\r\n      center.x,\r\n      center.y,\r\n      bulletCoordinates[0].x,\r\n      bulletCoordinates[0].y\r\n    );\r\n  };\r\n\r\n  return bullet;\r\n};\r\n",
    "import { buildAsteroid } from \"../objects/asteroid\";\r\n\r\nexport const buildCloud = function(Game) {\r\n  let cloud = {};\r\n\r\n  let width = Game.width();\r\n  let height = Game.height();\r\n  let params = Game.levels[Game.level()];\r\n\r\n  let count = params.count;\r\n  let maxSpeed = params.maxSpeed;\r\n  let asteroids = [];\r\n  let listRadius = Game.constants.LIST_RADIUS;\r\n  let startAngle = Game.constants.START_ANGLE;\r\n\r\n  cloud.init = function() {\r\n    this.generate(count);\r\n    return cloud;\r\n  };\r\n\r\n  cloud.generate = function(n) {\r\n    asteroids.length = 0;\r\n    for (let i = 0; i < n; i += 1) {\r\n      asteroids.push(cloud.addAsteroid());\r\n    }\r\n  };\r\n\r\n  cloud.addAsteroid = function() {\r\n    let radius = listRadius[Math.trunc(Math.random() * listRadius.length)];\r\n    let angle = Math.trunc(Math.random() * startAngle);\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    let variant = Math.random() > 0.5 ? 1 : 0;\r\n\r\n    if (variant) {\r\n      x = Math.random() > 0.5 ? width : 0;\r\n      y = Math.random() * height;\r\n    } else {\r\n      x = Math.random() * width;\r\n      y = Math.random() > 0.5 ? height : 0;\r\n    }\r\n\r\n    return buildAsteroid(x, y, radius, angle, maxSpeed, Game).init();\r\n  };\r\n\r\n  cloud.refresh = function(Game) {\r\n    params = Game.levels[Game.level()];\r\n    count = params.count;\r\n    maxSpeed = params.maxSpeed;\r\n    width = Game.width();\r\n    height = Game.height();\r\n    asteroids.length = 0;\r\n    cloud.init();\r\n    return cloud;\r\n  };\r\n\r\n  cloud.newAsteroid = function(center, radius) {\r\n    let angle = Math.trunc(Math.random() * startAngle);\r\n    return buildAsteroid(center.x, center.y, radius, angle, maxSpeed, Game).init();\r\n  };\r\n\r\n  cloud.asteroids = function() {\r\n    return [...asteroids];\r\n  };\r\n\r\n  return cloud;\r\n};\r\n",
    "import { buildBullet } from \"../objects/bullet\";\r\n\r\nexport const buildSpaceShip = function(Game) {\r\n  let spaceShip = {};\r\n\r\n  let center = { x: Game.width()/2, y: Game.height()/2 };\r\n\r\n  let speed = Game.constants.SPEED_SPACE_SHIP;\r\n  let speedRotation = Game.constants.SPEED_ROTATION_SHIP;\r\n\r\n  let colorBody = Game.constants.COLOR_SHIP;\r\n  let colorFire = Game.constants.COLOR_FIRE;\r\n\r\n  let timeBorn = 0;\r\n  let isDied = false;\r\n  let isMoving = false;\r\n  let isTurnLeft = false;\r\n  let isTurnRight = false;\r\n  let bodyCoordinates = [];\r\n  let fireCoordinates = [];\r\n\r\n  spaceShip.init = function() {\r\n    return spaceShip.calculateBody().calculateFire();\r\n  };\r\n\r\n  spaceShip.calculateBody = function() {\r\n    bodyCoordinates = Game.base.coordinates.createObject(\r\n      Game.templates.TMPL_SPACE_SHIP,\r\n      center\r\n    );\r\n    return this;\r\n  };\r\n\r\n  spaceShip.calculateFire = function() {\r\n    fireCoordinates = Game.base.coordinates.createObject(Game.templates.TMPL_FIRE, center);\r\n    return this;\r\n  };\r\n\r\n  spaceShip.shot = function() {\r\n    let point = bodyCoordinates[0];\r\n    return buildBullet(point.x, point.y, center.x, center.y, Game).init();\r\n  };\r\n\r\n  spaceShip.move = function(maxX, maxY) {\r\n    if (isDied) {\r\n      bodyCoordinates = Game.base.coordinates.createObject(\r\n        Game.templates.TMPL_BOOM,\r\n        center,\r\n        Game.constants.LIST_RADIUS[Game.constants.LIST_RADIUS.length - 1]\r\n      );\r\n      fireCoordinates = Game.base.coordinates.createObject(\r\n        Game.templates.TMPL_BOOM,\r\n        center,\r\n        Game.constants.LIST_RADIUS[0]\r\n      );\r\n      colorBody = Game.constants.COLOR_BOOM;\r\n      return this;\r\n    }\r\n\r\n    if (isMoving) {\r\n      spaceShip.calculateMove(maxX, maxY);\r\n    }\r\n    if (isTurnLeft) {\r\n      spaceShip.rotateLeft();\r\n    }\r\n    if (isTurnRight) {\r\n      spaceShip.rotateRight();\r\n    }\r\n  };\r\n\r\n  spaceShip.rotateRight = function() {\r\n    bodyCoordinates = bodyCoordinates.map(el =>\r\n      Game.base.coordinates.rotate(center.x, center.y, el.x, el.y, Game.base.math.toRadian(speedRotation))\r\n    );\r\n    fireCoordinates = fireCoordinates.map(el =>\r\n      Game.base.coordinates.rotate(center.x, center.y, el.x, el.y, Game.base.math.toRadian(speedRotation))\r\n    );\r\n    return this;\r\n  };\r\n\r\n  spaceShip.rotateLeft = function() {\r\n    bodyCoordinates = bodyCoordinates.map(el =>\r\n      Game.base.coordinates.rotate(center.x, center.y, el.x, el.y, Game.base.math.toRadian(-1 * speedRotation))\r\n    );\r\n    fireCoordinates = fireCoordinates.map(el =>\r\n      Game.base.coordinates.rotate(center.x, center.y, el.x, el.y, Game.base.math.toRadian(-1 * speedRotation))\r\n    );\r\n    return this;\r\n  };\r\n\r\n  // todo переробити на загальний метод beforeZero та afterMax\r\n  spaceShip.beforeZero = function(ind, max) {\r\n    if (center[ind] < 0) {\r\n      bodyCoordinates = Game.base.values.mutateObject(\r\n        bodyCoordinates,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      fireCoordinates = Game.base.values.mutateObject(\r\n        fireCoordinates,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      center[ind] = max;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  spaceShip.afterMax = function(ind, max) {\r\n    if (center[ind] > max) {\r\n      bodyCoordinates = Game.base.values.mutateObject(\r\n        bodyCoordinates,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      fireCoordinates = Game.base.values.mutateObject(\r\n        fireCoordinates,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      center[ind] = 0;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  spaceShip.calculateMove = function(maxX, maxY) {\r\n    spaceShip\r\n      .beforeZero(\"x\", maxX)\r\n      .afterMax(\"x\", maxX)\r\n      .beforeZero(\"y\", maxY)\r\n      .afterMax(\"y\", maxY);\r\n\r\n    let coefficientK = Game.base.math.coefficientK(\r\n      center.x,\r\n      center.y,\r\n      bodyCoordinates[0].x,\r\n      bodyCoordinates[0].y\r\n    );\r\n\r\n    if (Math.abs(coefficientK) === Infinity) {\r\n      spaceShip.lineX();\r\n      return this;\r\n    }\r\n    if (!coefficientK) {\r\n      spaceShip.lineY();\r\n      return this;\r\n    }\r\n    spaceShip.lineXY(coefficientK);\r\n\r\n    return this;\r\n  };\r\n\r\n  spaceShip.lineXY = function(coefficientK) {\r\n    let dx = Game.base.math.calculateDX(speed, coefficientK);\r\n    let dy = Game.base.math.calculateDY(dx, coefficientK);\r\n\r\n    let dirCondition = center.x > bodyCoordinates[0].x;\r\n\r\n    bodyCoordinates = bodyCoordinates.map(el => {\r\n      return dirCondition\r\n        ? Game.base.coordinates.pointDec(el, dx, dy)\r\n        : Game.base.coordinates.pointInc(el, dx, dy);\r\n    });\r\n\r\n    fireCoordinates = fireCoordinates.map(el => {\r\n      return dirCondition\r\n        ? Game.base.coordinates.pointDec(el, dx, dy)\r\n        : Game.base.coordinates.pointInc(el, dx, dy);\r\n    });\r\n\r\n    center.x = Game.base.values.changeValue(dirCondition, center.x, dx);\r\n    center.y = Game.base.values.changeValue(dirCondition, center.y, dy);\r\n  };\r\n\r\n  spaceShip.lineX = function() {\r\n    let dirCondition = center.y > bodyCoordinates[0].y;\r\n\r\n    bodyCoordinates = Game.base.values.mutateObject(bodyCoordinates, \"y\", value =>\r\n      Game.base.values.changeValue(dirCondition, value, speed)\r\n    );\r\n\r\n    fireCoordinates = Game.base.values.mutateObject(fireCoordinates, \"y\", value =>\r\n      Game.base.values.changeValue(dirCondition, value, speed)\r\n    );\r\n\r\n    center.y = Game.base.values.changeValue(dirCondition, center.y, speed);\r\n  };\r\n\r\n  spaceShip.lineY = function() {\r\n    let dirCondition = center.x > bodyCoordinates[0].x;\r\n\r\n    bodyCoordinates = Game.base.values.mutateObject(bodyCoordinates, \"x\", value =>\r\n      Game.base.values.changeValue(dirCondition, value, speed)\r\n    );\r\n\r\n    fireCoordinates = Game.base.values.mutateObject(fireCoordinates, \"x\", value =>\r\n      Game.base.values.changeValue(dirCondition, value, speed)\r\n    );\r\n\r\n    center.x = Game.base.values.changeValue(dirCondition, center.x, speed);\r\n  };\r\n\r\n  spaceShip.lines = function() {\r\n    return [\r\n      [bodyCoordinates[0], bodyCoordinates[1]],\r\n      [bodyCoordinates[1], bodyCoordinates[bodyCoordinates.length - 1]],\r\n      [bodyCoordinates[bodyCoordinates.length - 1], bodyCoordinates[0]]\r\n    ];\r\n  };\r\n\r\n  spaceShip.body = function() {\r\n    return bodyCoordinates;\r\n  };\r\n\r\n  spaceShip.fire = function() {\r\n    return fireCoordinates;\r\n  };\r\n\r\n  spaceShip.died = function(flag) {\r\n    isDied = flag;\r\n  };\r\n\r\n  spaceShip.alive = function() {\r\n    return isDied;\r\n  };\r\n\r\n  spaceShip.born = function(time) {\r\n    timeBorn = time;\r\n  };\r\n\r\n  spaceShip.timeBorn = function() {\r\n    return timeBorn;\r\n  };\r\n\r\n  spaceShip.speedRotation = function() {\r\n    return speedRotation;\r\n  };\r\n\r\n  spaceShip.colorBody = function() {\r\n    return colorBody;\r\n  };\r\n\r\n  spaceShip.colorFire = function() {\r\n    return colorFire;\r\n  };\r\n\r\n  spaceShip.isMoving = function(flag){\r\n    isMoving = flag;\r\n  };\r\n\r\n  spaceShip.moving = function(){\r\n    return isMoving;\r\n  };\r\n\r\n  spaceShip.isTurnLeft = function(flag){\r\n    isTurnLeft = flag;\r\n  };\r\n\r\n  spaceShip.isTurnRight = function(flag){\r\n    isTurnRight = flag;\r\n  };\r\n\r\n  return spaceShip;\r\n};\r\n"
  ]
}