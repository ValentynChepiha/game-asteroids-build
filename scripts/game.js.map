{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/core/base.js",
    "src/core/constants.js",
    "src/core/game.js",
    "src/core/levels.js",
    "src/core/objects.js",
    "src/index.js",
    "src/objects/asteroid.js",
    "src/objects/bullet.js",
    "src/objects/cloud.js",
    "src/objects/spaceShip.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "export default class Base {\r\n  coefficientK(x1, y1, x2, y2) {\r\n    return (y2 - y1) / (x2 - x1);\r\n  }\r\n\r\n  calculateDX(speed, coefficientK) {\r\n    return (speed ** 2 / (1 + coefficientK ** 2)) ** 0.5;\r\n  }\r\n\r\n  calculateDY(dx, coefficientK) {\r\n    return dx * coefficientK;\r\n  }\r\n\r\n  coefficientB(x1, y1, x2, y2) {\r\n    return y1 - x1 * this.coefficientK(x1, y1, x2, y2);\r\n  }\r\n\r\n  length(x1, y1, x2, y2) {\r\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5;\r\n  }\r\n\r\n  toRadian(angle) {\r\n    return (angle * Math.PI) / 180;\r\n  }\r\n\r\n  rotate(x0, y0, x, y, angle) {\r\n    return {\r\n      x:\r\n        x0 +\r\n        (x - x0) * Math.cos(this.toRadian(angle)) -\r\n        (y - y0) * Math.sin(this.toRadian(angle)),\r\n      y:\r\n        y0 +\r\n        (x - x0) * Math.sin(this.toRadian(angle)) +\r\n        (y - y0) * Math.cos(this.toRadian(angle))\r\n    };\r\n  }\r\n\r\n  pointInc(point, dx, dy) {\r\n    return { x: point.x + dx, y: point.y + dy };\r\n  }\r\n\r\n  pointDec(point, dx, dy) {\r\n    return { x: point.x - dx, y: point.y - dy };\r\n  }\r\n\r\n  changeValue(flag, value, delta) {\r\n    return (value += flag ? -1 * delta : delta);\r\n  }\r\n\r\n  mutateObject(object, ind, fn) {\r\n    return object.map(el => {\r\n      return { x: el.x, y: el.y, [ind]: fn(el[ind]) };\r\n    });\r\n  }\r\n\r\n  createObject(tmpl, center, radius = 1) {\r\n    return tmpl.map(point => {\r\n      return {\r\n        x: center.x + point.x * radius,\r\n        y: center.y + point.y * radius\r\n      };\r\n    });\r\n  }\r\n\r\n  pointBetweenTwoPoints(asteroid, line) {\r\n    return (\r\n      this.betweenTwoValues(asteroid.x, line[0].x, line[1].x) ||\r\n      this.betweenTwoValues(asteroid.y, line[0].y, line[1].y)\r\n    );\r\n  }\r\n\r\n  betweenTwoValues(a, b, c) {\r\n    [b, c] = [Math.min(b, c), Math.max(b, c)];\r\n    return a >= b && a <= c;\r\n  }\r\n\r\n  lineAcrossAsteroid(asteroid, line) {\r\n    let dx1 = line[0].x - asteroid.x;\r\n    let dy1 = line[0].y - asteroid.y;\r\n\r\n    let dx2 = line[1].x - asteroid.x;\r\n    let dy2 = line[1].y - asteroid.y;\r\n\r\n    let dx = dx1 - dx2;\r\n    let dy = dy1 - dy2;\r\n\r\n    let a = dx ** 2 + dy ** 2;\r\n    let b = 2 * (dx1 * dx + dy1 * dy);\r\n    let c = dx1 ** 2 + dy1 ** 2 - (asteroid.radius * 0.9) ** 2;\r\n\r\n    let d = b ** 2 - 4 * a * c;\r\n\r\n    if (d < 0) {\r\n      return false;\r\n    }\r\n\r\n    let x1 = (-b + d ** 0.5) / (4 * a);\r\n    let x2 = (-b - d ** 0.5) / (4 * a);\r\n\r\n    return ((x1 >= 0 && x1 <= 1) || (x1 >= 0 && x2 <= 1)) && d > 0;\r\n  }\r\n}\r\n",
    "export const COLOR_ASTEROID = \"#959595\";\r\nexport const COLOR_SHIP = \"#6e7bd0\";\r\nexport const COLOR_FIRE = \"#d05018\";\r\nexport const COLOR_BULLET = \"#fff805\";\r\nexport const COLOR_TEXT = \"#06ff4c\";\r\nexport const COLOR_BOOM = \"#ff921a\";\r\n\r\nexport const COUNT_LIVE = 3;\r\n\r\nexport const LENGTH_PATH_BULLET = 400;\r\n\r\nexport const SPEED_BULLET = 5;\r\nexport const SPEED_SPACE_SHIP = 3;\r\nexport const SPEED_ROTATION_SHIP = 3;\r\n\r\nexport const LIST_RADIUS = [10, 20, 30];\r\nexport const START_ANGLE = 180;\r\n\r\nexport const SHOW_DIED_ASTEROID = 100;\r\nexport const SHOW_BORN_SPACE_SHIP = 1000;",
    "import SpaceShip from \"../objects/spaceShip\";\r\nimport Cloud from \"../objects/cloud\";\r\nimport * as CONST from \"./constants\";\r\nimport { LEVELS } from \"./levels\";\r\n\r\nexport default class Game {\r\n  constructor() {\r\n    this.container = document.getElementById(\"content\");\r\n    this.canvas = document.getElementById(\"canvas\");\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n    this.footer = document.getElementById(\"footer\");\r\n    this.playAgain = document.getElementById(\"play-again\");\r\n\r\n\r\n    this.prevUpdateTime = 0;\r\n    this.height = 0;\r\n    this.width = 0;\r\n\r\n    this.level = 0;\r\n    this.live = CONST.COUNT_LIVE;\r\n    this.score = 0;\r\n\r\n    this.asteroids = [];\r\n    this.bullets = [];\r\n\r\n    this.showSpaseShip = true;\r\n    this.animation = '';\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    window.addEventListener(\"resize\", x => this.onResize());\r\n    this.playAgain.addEventListener('click', e => this.restart());\r\n\r\n    this.start();\r\n  }\r\n\r\n  start(){\r\n    window.addEventListener(\"keydown\", e => this.onKeydown(e));\r\n    window.addEventListener(\"keyup\", e => this.onKeyup(e));\r\n    this.onResize();\r\n\r\n    this.ctx.clearRect(0,0,this.width, this.height);\r\n    this.cloud = new Cloud(this.width, this.height, LEVELS[this.level]);\r\n    this.asteroids = this.cloud.asteroids;\r\n    this.spaceShip = new SpaceShip(this.width / 2, this.height / 2);\r\n\r\n    requestAnimationFrame(time => this.update(time));\r\n  }\r\n\r\n  restart(){\r\n    window.location.reload();\r\n  }\r\n\r\n  draw() {\r\n\r\n    if(!this.live){\r\n      this.gameOver();\r\n      return this;\r\n    }\r\n\r\n    if (this.score > LEVELS[this.level].score) {\r\n      this.level += 1;\r\n    }\r\n\r\n    let newAsteroids = [];\r\n\r\n    if (!this.asteroids.length) {\r\n      this.asteroids = this.cloud.refresh(\r\n        this.width,\r\n        this.height,\r\n        LEVELS[this.level]\r\n      ).asteroids;\r\n    }\r\n\r\n    if (this.spaceShip.born) {\r\n      this.showSpaseShip = !this.showSpaseShip;\r\n      if (\r\n        this.prevUpdateTime - this.spaceShip.born >=\r\n        CONST.SHOW_BORN_SPACE_SHIP\r\n      ) {\r\n        this.spaceShip.born = 0;\r\n        this.showSpaseShip = true;\r\n      }\r\n    }\r\n\r\n    if (this.spaceShip.died) {\r\n      this.live -= 1;\r\n      this.spaceShip = new SpaceShip(this.width / 2, this.height / 2);\r\n      this.spaceShip.born = this.prevUpdateTime;\r\n    }\r\n\r\n    for (let i = 0; i < this.asteroids.length; i += 1) {\r\n      this.asteroids[i].move(this.width, this.height);\r\n      if (this.asteroids[i].died && !this.asteroids[i].timeDied) {\r\n        this.asteroids[i].timeDied = this.prevUpdateTime;\r\n        newAsteroids.push(...this.createFragmentsAsteroid(this.asteroids[i]));\r\n      }\r\n      this.drawPolygon(this.asteroids[i].body, this.asteroids[i].currentColor);\r\n    }\r\n\r\n    if (newAsteroids.length) {\r\n      this.asteroids.push(...newAsteroids);\r\n    }\r\n\r\n    this.asteroids = this.asteroids.filter(\r\n      asteroid =>\r\n        !asteroid.died ||\r\n        (asteroid.died &&\r\n          this.prevUpdateTime - asteroid.timeDied < CONST.SHOW_DIED_ASTEROID)\r\n    );\r\n\r\n    this.spaceShip.move(this.width, this.height);\r\n\r\n    if (this.showSpaseShip) {\r\n      this.drawSpaceShip();\r\n    }\r\n\r\n    this.bullets = this.bullets.filter(bullet => bullet.alive);\r\n\r\n    for (let i = 0; i < this.bullets.length; i += 1) {\r\n      this.bullets[i].move(this.width, this.height);\r\n      this.drawPolygon(this.bullets[i].body, CONST.COLOR_BULLET);\r\n    }\r\n\r\n    this.drawLives();\r\n    this.drawScore();\r\n\r\n    this.collisions();\r\n  }\r\n\r\n  drawSpaceShip() {\r\n    this.drawPolygon(this.spaceShip.body, this.spaceShip.colorBody);\r\n    if (this.spaceShip.isMoving) {\r\n      this.drawPolygon(this.spaceShip.fire, this.spaceShip.colorFire);\r\n    }\r\n  }\r\n\r\n  createFragmentsAsteroid(asteroid) {\r\n    let currentRadius = asteroid.currentRadius;\r\n    let newIndex = CONST.LIST_RADIUS.indexOf(currentRadius) - 1;\r\n    this.score += currentRadius;\r\n    if (newIndex > -1) {\r\n      let newRadius = CONST.LIST_RADIUS[newIndex];\r\n      return [\r\n        this.cloud.newAsteroid(asteroid.center, newRadius),\r\n        this.cloud.newAsteroid(asteroid.center, newRadius)\r\n      ];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  collisions() {\r\n    for (let i = 0; i < this.asteroids.length; i += 1) {\r\n      if (this.asteroids[i].died) {\r\n        continue;\r\n      }\r\n      for (let j = 0; j < this.bullets.length; j += 1) {\r\n        let flag = this.collisionAsteroidBullet(\r\n          this.asteroids[i],\r\n          this.bullets[j]\r\n        );\r\n        if (flag) {\r\n          this.asteroids[i].hitInc = 1;\r\n          this.bullets[j].died = flag;\r\n        }\r\n      }\r\n\r\n      if (\r\n        !this.spaceShip.born ||\r\n        this.prevUpdateTime - this.spaceShip.born >= CONST.SHOW_BORN_SPACE_SHIP\r\n      ) {\r\n        this.collisionAsteroidShip(this.asteroids[i], this.spaceShip);\r\n      }\r\n    }\r\n  }\r\n\r\n  collisionAsteroidBullet(asteroid, bullet) {\r\n    let ab = bullet.length(asteroid.x, asteroid.y, bullet.x, bullet.y);\r\n    return ab < asteroid.radius + bullet.radius + 2;\r\n  }\r\n\r\n  collisionAsteroidShip(asteroid, spaceShip) {\r\n    let lines = spaceShip.lines;\r\n    for (let i = 0; i < lines.length; i += 1) {\r\n      if (asteroid.pointBetweenTwoPoints(asteroid, lines[i])) {\r\n        if (asteroid.lineAcrossAsteroid(asteroid, lines[i])) {\r\n          spaceShip.died = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  drawPolygon(polygon, color) {\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.moveTo(\r\n      polygon[polygon.length - 1].x,\r\n      polygon[polygon.length - 1].y\r\n    );\r\n    for (let i = 0; i < polygon.length; i += 1) {\r\n      this.ctx.lineTo(polygon[i].x, polygon[i].y);\r\n    }\r\n    this.ctx.fill();\r\n    this.ctx.closePath();\r\n  }\r\n\r\n  drawScore() {\r\n    this.ctx.textAlign = \"left\";\r\n    this.ctx.font = \"24px Arial\";\r\n    this.ctx.fillStyle = CONST.COLOR_TEXT;\r\n    this.ctx.fillText(`Score: ${this.score}`, 8, 30);\r\n  }\r\n\r\n  drawLives() {\r\n    this.ctx.textAlign = \"left\";\r\n    this.ctx.font = \"24px Arial\";\r\n    this.ctx.fillStyle = CONST.COLOR_TEXT;\r\n    this.ctx.fillText(`Lives: ${this.live}`, this.width - 110, 30);\r\n  }\r\n\r\n  onResize() {\r\n    this.width = this.container.clientWidth;\r\n    this.height = this.container.clientHeight;\r\n\r\n    this.canvas.width = this.width;\r\n    this.canvas.height = this.height;\r\n  }\r\n\r\n  onKeydown(e) {\r\n    if (e.code === \"Space\") {\r\n      this.bullets.push(this.spaceShip.shot());\r\n    }\r\n    if (e.code === \"ArrowLeft\") {\r\n      this.spaceShip.isTurnLeft = true;\r\n    }\r\n    if (e.code === \"ArrowRight\") {\r\n      this.spaceShip.isTurnRight = true;\r\n    }\r\n    if (e.code === \"ArrowUp\") {\r\n      this.spaceShip.isMoving = true;\r\n    }\r\n  }\r\n\r\n  onKeyup(e) {\r\n    if (e.code === \"ArrowLeft\") {\r\n      this.spaceShip.isTurnLeft = false;\r\n    }\r\n    if (e.code === \"ArrowRight\") {\r\n      this.spaceShip.isTurnRight = false;\r\n    }\r\n    if (e.code === \"ArrowUp\") {\r\n      this.spaceShip.isMoving = false;\r\n    }\r\n  }\r\n\r\n  update(time) {\r\n    const dt = time - this.prevUpdateTime;\r\n    this.prevUpdateTime = time;\r\n    this.ctx.clearRect(0, 0, this.width, this.height);\r\n    this.draw();\r\n    this.animation = requestAnimationFrame(time => this.update(time));\r\n  }\r\n\r\n  gameOver() {\r\n    window.cancelAnimationFrame(this.animation);\r\n    window.removeEventListener(\"keydown\", e => this.onKeydown(e));\r\n    window.removeEventListener(\"keyup\", e => this.onKeyup(e));\r\n\r\n    this.ctx.clearRect(0,0,this.width, this.height);\r\n    this.ctx.font = \"48px Arial\";\r\n    this.ctx.fillStyle = CONST.COLOR_TEXT;\r\n    this.ctx.textAlign = \"center\";\r\n    this.ctx.fillText(`You score: ${this.score}`, this.width/2, this.height/2-80);\r\n    this.ctx.font = \"72px Arial\";\r\n    this.ctx.fillStyle = CONST.COLOR_TEXT;\r\n    this.ctx.fillText(`Game over`, this.width/2, this.height/2);\r\n  }\r\n}\r\n",
    "export const LEVELS = [\r\n  {\r\n    count: 7,\r\n    maxSpeed: 2,\r\n    score: 500\r\n  },\r\n  {\r\n    count: 8,\r\n    maxSpeed: 2,\r\n    score: 1000\r\n  },\r\n  {\r\n    count: 8,\r\n    maxSpeed: 3,\r\n    score: 2000\r\n  },\r\n  {\r\n    count: 10,\r\n    maxSpeed: 3,\r\n    score: 3000\r\n  },\r\n  {\r\n    count: 13,\r\n    maxSpeed: 4,\r\n    score: Infinity\r\n  }\r\n];\r\n",
    "export const TMPL_ASTEROID = [\r\n  { x: 6, y: -7 },\r\n  { x: 7, y: -6 },\r\n  { x: 8, y: -5 },\r\n  { x: 9, y: -4 },\r\n  { x: 8, y: 6 },\r\n  { x: -6, y: 8 },\r\n  { x: -5, y: 6 },\r\n  { x: -7, y: 7 },\r\n  { x: -8, y: 1 },\r\n  { x: -8, y: -2 },\r\n  { x: -8, y: -6 },\r\n  { x: -4, y: -9 }\r\n];\r\n\r\nexport const TMPL_BOOM = [\r\n  { x: 7, y: -1 },\r\n  { x: 2, y: 1 },\r\n  { x: 5, y: 5 },\r\n  { x: 1, y: 2 },\r\n  { x: 0, y: 8 },\r\n  { x: -1, y: 2 },\r\n  { x: -4, y: 4 },\r\n  { x: -2, y: 1 },\r\n  { x: -8, y: 0 },\r\n  { x: -2, y: -1 },\r\n  { x: -5, y: -4 },\r\n  { x: -1, y: -3 },\r\n  { x: 1, y: -9 },\r\n  { x: 1, y: -2 },\r\n  { x: 5, y: -5 },\r\n  { x: 2, y: -1 },\r\n];\r\n\r\nexport const TMPL_SPACE_SHIP = [\r\n  { x: 0, y: -20 },\r\n  { x: 15, y: 17 },\r\n  { x: 7, y: 10 },\r\n  { x: -7, y: 10 },\r\n  { x: -15, y: 17 }\r\n];\r\n\r\nexport const TMPL_FIRE = [\r\n  { x: 5, y: 10 },\r\n  { x: 0, y: 20 },\r\n  { x: -5, y: 10 }\r\n];\r\n\r\nexport const TMPL_BULLET = [\r\n  { x: 2, y: -2 },\r\n  { x: -2, y: -2 },\r\n  { x: -2, y: 2 },\r\n  { x: 2, y: 2 }\r\n];\r\n",
    "import Game from './core/game';\r\n\r\nnew Game();",
    "import Base from \"../core/base\";\r\nimport { TMPL_ASTEROID, TMPL_BOOM } from \"../core/objects\";\r\nimport { COLOR_ASTEROID, COLOR_BOOM  } from \"../core/constants\";\r\n\r\nexport default class Asteroid extends Base {\r\n  constructor(x, y, radius, angle, maxSpeed) {\r\n    super();\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.angle = angle;\r\n    this.maxSpeed = maxSpeed;\r\n    this.health = String(this.radius)[0] * 1;\r\n    this.hit = 0;\r\n\r\n    this.speed = {};\r\n    this.isDied = false;\r\n    this.time = 0;\r\n    this.color = COLOR_ASTEROID;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    let dir = Math.random() > 0.5 ? -1 : 1;\r\n    let value = Math.ceil(Math.random() * this.maxSpeed);\r\n    this.speed.moveX = dir * value;\r\n\r\n    dir = Math.random() > 0.5 ? -1 : 1;\r\n    value = Math.ceil(Math.random() * this.maxSpeed);\r\n    this.speed.moveY = dir * value;\r\n\r\n    value = Math.ceil(Math.random() * 11);\r\n    this.speed.rotation = dir * value;\r\n  }\r\n\r\n  set hitInc(value) {\r\n    this.hit += value;\r\n  }\r\n\r\n  get body() {\r\n    return this.bodyCoord;\r\n  }\r\n\r\n  get died() {\r\n    return this.isDied;\r\n  }\r\n\r\n  get timeDied() {\r\n    return this.time;\r\n  }\r\n\r\n  set timeDied(time) {\r\n    this.time = time;\r\n  }\r\n\r\n  get center() {\r\n    return {x: this.x, y: this.y};\r\n  }\r\n\r\n  get currentRadius() {\r\n    return this.radius;\r\n  }\r\n\r\n  get currentColor() {\r\n    return this.color;\r\n  }\r\n\r\n  moveX(maxX) {\r\n    if (!this.speed.moveX) {\r\n      return this;\r\n    }\r\n\r\n    this.x += this.speed.moveX;\r\n    if (this.x > maxX) {\r\n      this.x = 0;\r\n    }\r\n\r\n    if (this.x < 0) {\r\n      this.x = maxX;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  moveY(maxY) {\r\n    if (!this.speed.moveY) {\r\n      return this;\r\n    }\r\n\r\n    this.y += this.speed.moveY;\r\n    if (this.y > maxY) {\r\n      this.y = 0;\r\n    }\r\n\r\n    if (this.y < 0) {\r\n      this.y = maxY;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  calculateBody() {\r\n    this.angle += this.speed.rotation;\r\n    this.angle = this.angle % 360;\r\n\r\n    this.bodyCoord = this.createObject(TMPL_ASTEROID, this, this.health);\r\n    this.bodyCoord = this.bodyCoord.map(el =>\r\n      this.rotate(this.x, this.y, el.x, el.y, this.angle)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  calculateBoom() {\r\n    this.bodyCoord = this.createObject(TMPL_BOOM, this, this.health);\r\n  }\r\n\r\n  move(maxX, maxY) {\r\n    if (this.hit >= this.health) {\r\n      this.isDied = true;\r\n      this.color = COLOR_BOOM;\r\n      this.calculateBoom();\r\n      return this;\r\n    }\r\n\r\n    return this.moveX(maxX)\r\n      .moveY(maxY)\r\n      .calculateBody();\r\n  }\r\n}\r\n",
    "import Base from \"../core/base\";\r\nimport { SPEED_BULLET, LENGTH_PATH_BULLET } from \"../core/constants\";\r\nimport {} from \"../core/objects\";\r\nimport {TMPL_BULLET} from \"../core/objects\";\r\n\r\nexport default class Bullet extends Base {\r\n  constructor({ x, y }, x0, y0) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.ship = { x0, y0 };\r\n    this.speed = SPEED_BULLET;\r\n\r\n    this.dx = 0;\r\n    this.dy = 0;\r\n\r\n    this.isDied = false;\r\n    this.maxLengthPath = LENGTH_PATH_BULLET;\r\n    this.lengthPath = 0;\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bulletCoord = this.calculateBody();\r\n    this.k = this.coefficientK(this.ship.x0, this.ship.y0, this.x, this.y);\r\n    this.calculateDelta(this.k);\r\n  }\r\n\r\n  calculateDelta(coefficientK) {\r\n    let dirCondition;\r\n\r\n    if (Math.abs(coefficientK) === Infinity) {\r\n      dirCondition = this.ship.y0 > this.y;\r\n      this.dx = 0;\r\n      this.dy = this.speed * (dirCondition ? -1 : 1);\r\n      return;\r\n    }\r\n\r\n    dirCondition = this.ship.x0 > this.x;\r\n\r\n    if (!coefficientK) {\r\n      this.dx = this.speed * (dirCondition ? -1 : 1);\r\n      this.dy = 0;\r\n      return;\r\n    }\r\n\r\n    this.dx = (dirCondition ? -1 : 1) * this.calculateDX(this.speed, coefficientK);\r\n    this.dy = this.calculateDY(this.dx, coefficientK);\r\n  }\r\n\r\n  calculateBody() {\r\n    return this.createObject(TMPL_BULLET, this);\r\n  }\r\n\r\n  beforeZero(ind, max) {\r\n    if (this[ind] < 0) {\r\n      this.bulletCoord = this.mutateObject(\r\n        this.bulletCoord,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      this[ind] = max;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  afterMax(ind, max) {\r\n    if (this[ind] > max) {\r\n      this.bulletCoord = this.mutateObject(\r\n        this.bulletCoord,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      this[ind] = 0;\r\n    }\r\n    return this;\r\n  }\r\n\r\n\r\n  move(maxX, maxY) {\r\n    if(this.lengthPath>this.maxLengthPath){\r\n      this.isDied = true;\r\n      return;\r\n    }\r\n\r\n    this.beforeZero(\"x\", maxX)\r\n      .afterMax(\"x\", maxX)\r\n      .beforeZero(\"y\", maxY)\r\n      .afterMax(\"y\", maxY);\r\n\r\n\r\n    this.lengthPath += this.speed;\r\n    this.bulletCoord = this.bulletCoord.map(el => {\r\n      return this.pointInc(el, this.dx, this.dy);\r\n    });\r\n    this.x += this.dx;\r\n    this.y += this.dy;\r\n  }\r\n\r\n  set died(flag) {\r\n    this.isDied = flag;\r\n  }\r\n\r\n  get body() {\r\n    return this.bulletCoord;\r\n  }\r\n\r\n  get alive() {\r\n    return !this.isDied;\r\n  }\r\n\r\n  get radius() {\r\n    return this.length(this.x, this.y, this.bulletCoord[0].x, this.bulletCoord[0].y);\r\n  }\r\n}\r\n",
    "import Asteroid from \"./asteroid\";\r\nimport { LIST_RADIUS, START_ANGLE } from \"../core/constants\";\r\n\r\nexport default class Cloud {\r\n  constructor(width, height, params) {\r\n    this.count = params.count;\r\n    this.maxSpeed = params.maxSpeed;\r\n    this.cloud = [];\r\n    this.width = width;\r\n    this.height = height;\r\n    this.listRadius = LIST_RADIUS;\r\n    this.startAngle = START_ANGLE;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.generate(this.count);\r\n  }\r\n\r\n  refresh(width, height, params){\r\n    this.count = params.count;\r\n    this.maxSpeed = params.maxSpeed;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.cloud.length = 0;\r\n    this.init();\r\n    return this;\r\n  }\r\n\r\n  generate(n) {\r\n    this.cloud.length = 0;\r\n    for (let i = 0; i < n; i += 1) {\r\n      this.cloud.push(this.addAsteroid());\r\n    }\r\n  }\r\n\r\n  addAsteroid() {\r\n    let radius = this.listRadius[Math.trunc(Math.random() * this.listRadius.length)];\r\n    let angle = Math.trunc(Math.random() * this.startAngle);\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    let variant = Math.random() > 0.5 ? 1 : 0;\r\n\r\n    if (variant) {\r\n      x = Math.random() > 0.5 ? this.width : 0;\r\n      y = Math.random() * this.height;\r\n    } else {\r\n      x = Math.random() * this.width;\r\n      y = Math.random() > 0.5 ? this.height : 0;\r\n    }\r\n\r\n    return new Asteroid(x, y, radius, angle, this.maxSpeed);\r\n  }\r\n\r\n  newAsteroid(center, radius) {\r\n    let angle = Math.trunc(Math.random() * this.startAngle);\r\n    return new Asteroid(center.x, center.y, radius, angle, this.maxSpeed);\r\n  }\r\n\r\n  get asteroids() {\r\n    return [...this.cloud];\r\n  }\r\n}\r\n",
    "import Bullet from \"./bullet\";\r\nimport Base from \"../core/base\";\r\nimport {\r\n  SPEED_SPACE_SHIP,\r\n  SPEED_ROTATION_SHIP,\r\n  LIST_RADIUS,\r\n  COLOR_SHIP,\r\n  COLOR_FIRE,\r\n  COLOR_BOOM\r\n} from \"../core/constants\";\r\n\r\nimport { TMPL_SPACE_SHIP, TMPL_FIRE, TMPL_BOOM } from \"../core/objects\";\r\n\r\nexport default class SpaceShip extends Base {\r\n  constructor(x, y) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.speed = SPEED_SPACE_SHIP;\r\n    this.rotation = SPEED_ROTATION_SHIP;\r\n\r\n    this.colorBody = COLOR_SHIP;\r\n    this.colorFire = COLOR_FIRE;\r\n\r\n    this.timeBorn = 0;\r\n    this.isDied = false;\r\n    this.isMoving = false;\r\n    this.isTurnLeft = false;\r\n    this.isTurnRight = false;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.calculateBody().calculateFire();\r\n  }\r\n\r\n  calculateBody() {\r\n    this.bodyCoord = this.createObject(TMPL_SPACE_SHIP, this);\r\n    return this;\r\n  }\r\n\r\n  calculateFire() {\r\n    this.fireCoord = this.createObject(TMPL_FIRE, this);\r\n    return this;\r\n  }\r\n\r\n  shot() {\r\n    return new Bullet(this.bodyCoord[0], this.x, this.y);\r\n  }\r\n\r\n  move(maxX, maxY) {\r\n    if(this.isDied){\r\n      this.bodyCoord = this.createObject(TMPL_BOOM, this, LIST_RADIUS[LIST_RADIUS.length-1]);\r\n      this.fireCoord = this.createObject(TMPL_BOOM, this, LIST_RADIUS[0]);\r\n      this.colorBody = COLOR_BOOM;\r\n      return this;\r\n    }\r\n\r\n    if (this.isMoving) {\r\n      this.calculateMove(maxX, maxY);\r\n    }\r\n    if (this.isTurnLeft) {\r\n      this.rotateLeft();\r\n    }\r\n    if (this.isTurnRight) {\r\n      this.rotateRight();\r\n    }\r\n  }\r\n\r\n  rotateRight() {\r\n    this.bodyCoord = this.bodyCoord.map(el =>\r\n      this.rotate(this.x, this.y, el.x, el.y, this.rotation)\r\n    );\r\n    this.fireCoord = this.fireCoord.map(el =>\r\n      this.rotate(this.x, this.y, el.x, el.y, this.rotation)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.bodyCoord = this.bodyCoord.map(el =>\r\n      this.rotate(this.x, this.y, el.x, el.y, -1 * this.rotation)\r\n    );\r\n    this.fireCoord = this.fireCoord.map(el =>\r\n      this.rotate(this.x, this.y, el.x, el.y, -1 * this.rotation)\r\n    );\r\n    return this;\r\n  }\r\n\r\n  beforeZero(ind, max) {\r\n    if (this[ind] < 0) {\r\n      this.bodyCoord = this.mutateObject(\r\n        this.bodyCoord,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      this.fireCoord = this.mutateObject(\r\n        this.fireCoord,\r\n        ind,\r\n        value => max + value\r\n      );\r\n      this[ind] = max;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  afterMax(ind, max) {\r\n    if (this[ind] > max) {\r\n      this.bodyCoord = this.mutateObject(\r\n        this.bodyCoord,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      this.fireCoord = this.mutateObject(\r\n        this.fireCoord,\r\n        ind,\r\n        value => value - max\r\n      );\r\n      this[ind] = 0;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  calculateMove(maxX, maxY) {\r\n    this.beforeZero(\"x\", maxX)\r\n      .afterMax(\"x\", maxX)\r\n      .beforeZero(\"y\", maxY)\r\n      .afterMax(\"y\", maxY);\r\n\r\n    let coefficientK = this.coefficientK(\r\n      this.x,\r\n      this.y,\r\n      this.bodyCoord[0].x,\r\n      this.bodyCoord[0].y\r\n    );\r\n\r\n    if (Math.abs(coefficientK) === Infinity) {\r\n      this.lineX();\r\n      return this;\r\n    }\r\n    if (!coefficientK) {\r\n      this.lineY();\r\n      return this;\r\n    }\r\n    this.lineXY(coefficientK);\r\n\r\n    return this;\r\n  }\r\n\r\n  lineXY(coefficientK) {\r\n    let dx = this.calculateDX(this.speed, coefficientK);\r\n    let dy = this.calculateDY(dx, coefficientK);\r\n\r\n    let dirCondition = this.x > this.bodyCoord[0].x;\r\n\r\n    this.bodyCoord = this.bodyCoord.map(el => {\r\n      return dirCondition\r\n        ? this.pointDec(el, dx, dy)\r\n        : this.pointInc(el, dx, dy);\r\n    });\r\n    this.fireCoord = this.fireCoord.map(el => {\r\n      return dirCondition\r\n        ? this.pointDec(el, dx, dy)\r\n        : this.pointInc(el, dx, dy);\r\n    });\r\n\r\n    this.x = this.changeValue(dirCondition, this.x, dx);\r\n    this.y = this.changeValue(dirCondition, this.y, dy);\r\n  }\r\n\r\n  lineX() {\r\n    let dirCondition = this.y > this.bodyCoord[0].y;\r\n\r\n    this.bodyCoord = this.mutateObject(this.bodyCoord, \"y\", value =>\r\n      this.changeValue(dirCondition, value, this.speed)\r\n    );\r\n\r\n    this.fireCoord = this.mutateObject(this.fireCoord, \"y\", value =>\r\n      this.changeValue(dirCondition, value, this.speed)\r\n    );\r\n\r\n    this.y = this.changeValue(dirCondition, this.y, this.speed);\r\n  }\r\n\r\n  lineY() {\r\n    let dirCondition = this.x > this.bodyCoord[0].x;\r\n\r\n    this.bodyCoord = this.mutateObject(this.bodyCoord, \"x\", value =>\r\n      this.changeValue(dirCondition, value, this.speed)\r\n    );\r\n\r\n    this.fireCoord = this.mutateObject(this.fireCoord, \"x\", value =>\r\n      this.changeValue(dirCondition, value, this.speed)\r\n    );\r\n\r\n    this.x = this.changeValue(dirCondition, this.x, this.speed);\r\n  }\r\n\r\n  get lines(){\r\n    return [\r\n      [this.bodyCoord[0], this.bodyCoord[1]],\r\n      [this.bodyCoord[1], this.bodyCoord[this.bodyCoord.length-1]],\r\n      [this.bodyCoord[this.bodyCoord.length-1], this.bodyCoord[0]],\r\n    ]\r\n  }\r\n\r\n  get body() {\r\n    return this.bodyCoord;\r\n  }\r\n\r\n  get fire() {\r\n    return this.fireCoord;\r\n  }\r\n\r\n  set died(flag) {\r\n    this.isDied = flag;\r\n  }\r\n\r\n  get died() {\r\n    return this.isDied;\r\n  }\r\n\r\n  set born(time) {\r\n    this.timeBorn = time;\r\n  }\r\n\r\n  get born() {\r\n    return this.timeBorn;\r\n  }\r\n\r\n}\r\n"
  ]
}